// Copyright 2017 Google Inc. All rights reserved.
// Copyright 2020 igrmk. All rights reserved.
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to writing, software distributed
// under the License is distributed on a "AS IS" BASIS, WITHOUT WARRANTIES OR
// CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.

// Added as a .go file to avoid embedding issues of the template.

package main

import "text/template"

var generatedTmpl = template.Must(template.New("generated").Parse(`
// generated by yamlenums {{.Command}}; DO NOT EDIT

package {{.PackageName}}

import (
    "fmt"

    "gopkg.in/yaml.v3"
)

{{range $typename, $values := .TypesAndValues}}

var (
    _{{$typename}}NameToValue = map[string]{{$typename}} {
        {{range $values}}"{{.}}": {{.}},
        {{end}}
    }

    _{{$typename}}ValueToName = map[{{$typename}}]string {
        {{range $values}}{{.}}: "{{.}}",
        {{end}}
    }
)

func init() {
    var v {{$typename}}
    if _, ok := interface{}(v).(fmt.Stringer); ok {
        _{{$typename}}NameToValue = map[string]{{$typename}} {
            {{range $values}}interface{}({{.}}).(fmt.Stringer).String(): {{.}},
            {{end}}
        }
    }
}

// MarshalYAML is generated so {{$typename}} satisfies yaml.Marshaler.
func (r {{$typename}}) MarshalYAML() (interface{}, error) {
    if s, ok := interface{}(r).(fmt.Stringer); ok {
        return s.String(), nil
    }
    s, ok := _{{$typename}}ValueToName[r]
    if !ok {
        return nil, fmt.Errorf("invalid {{$typename}}: %d", r)
    }
    return s, nil
}

// UnmarshalYAML is generated so {{$typename}} satisfies yaml.Unmarshaler.
func (r *{{$typename}}) UnmarshalYAML(value *yaml.Node) error {
	v, ok := _{{$typename}}NameToValue[value.Value]
	if !ok {
		return fmt.Errorf("invalid {{$typename}} %q", value.Value)
	}
	*r = v
	return nil
}

{{end}}
`))
