// generated by yamlenums -type=ShirtSize; DO NOT EDIT

package main

import (
	"fmt"

	"gopkg.in/yaml.v3"
)

var (
	_ShirtSizeNameToValue = map[string]ShirtSize{
		"NA": NA,
		"XS": XS,
		"S":  S,
		"M":  M,
		"L":  L,
		"XL": XL,
	}

	_ShirtSizeValueToName = map[ShirtSize]string{
		NA: "NA",
		XS: "XS",
		S:  "S",
		M:  "M",
		L:  "L",
		XL: "XL",
	}
)

func init() {
	var v ShirtSize
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_ShirtSizeNameToValue = map[string]ShirtSize{
			interface{}(NA).(fmt.Stringer).String(): NA,
			interface{}(XS).(fmt.Stringer).String(): XS,
			interface{}(S).(fmt.Stringer).String():  S,
			interface{}(M).(fmt.Stringer).String():  M,
			interface{}(L).(fmt.Stringer).String():  L,
			interface{}(XL).(fmt.Stringer).String(): XL,
		}
	}
}

// MarshalYAML is generated so ShirtSize satisfies yaml.Marshaler.
func (r ShirtSize) MarshalYAML() (interface{}, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return s.String(), nil
	}
	s, ok := _ShirtSizeValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid ShirtSize: %d", r)
	}
	return s, nil
}

// UnmarshalYAML is generated so ShirtSize satisfies yaml.Unmarshaler.
func (r *ShirtSize) UnmarshalYAML(value *yaml.Node) error {
	v, ok := _ShirtSizeNameToValue[value.Value]
	if !ok {
		return fmt.Errorf("invalid ShirtSize %q", value.Value)
	}
	*r = v
	return nil
}
